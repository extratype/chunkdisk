C++, WinSpd

Disk metadata file: name.chunkdisk
    disk_size
    chunk_size
    num_of_chunks path/to/dir/      # first part
    num_of_chunks path/to/dir/...   # ...

Differential disk: name.chunkdisk
    parent_file                     # maybe differential, read-only
    disk_size                       # same as parent
    chunk_size                      # same as parent
    num_of_chunks path/to/dir/      # first part for this disk
    num_of_chunks path/to/dir/...   # ...

Chunk files:
    part: choose first, second, ... part when creating
    file name: chunk###
    file size: 0 or chunk_size; empty or full
    files are not removed by chunkdisk after created

Read():
    current → parent → ...
    ReadFile()
    chunk not found or empty: zero-fill buffer

Write():
    current only
    WriteFile()
    not found at all: full chunk
    not found in current and found in parent:
        exclusive (locked) access
        copy parent to current

Unmap(): a.k.a. TRIM
    unmap range <  chunk:
        FSCTL_SET_ZERO_DATA, which supports sparse files
        zero-fill if not supported
        ... if -Z 1 (default)

    unmap range >= chunk:
        exclusive (locked) access
        make it empty by truncating

I/O:
    FILE_FLAG_OVERLAPPED for asynchronous I/O
    FILE_FLAG_NO_BUFFERING as Windows caches the virtual disk

    Alignment requirements by FILE_FLAG_NO_BUFFERING:
        Always align to 4096 bytes (pages) like 512e
        Convert unaligned block I/O to page I/O:
            write through
            flush when aligned
            few block I/O requests for 4096 bytes cluster

    No write buffering:
        Ignore FlushFlag in Read() or Write()
        Do nothing in Flush()

    Close unused file handles to trigger metadata updates

    1048576 bytes MaxTransferLength:
        No length limit in ReadFile(), WriteFile()
        Prefer single large request over multiple small requests
        For better sequential performance
            Read(), Write() calls are not deterministic

Support moving chunks while running (if -M 1):
    For write buffering outside chunkdisk
    Lock a chunk to move, busy wait in chunkdisk
    Rescan parts for missing chunks

--------------------------------------------------------------------------------

main():
    Command line arguments
    chunkdisk parameters
    WinSpd parameters
        virtual disk serial number: GUID
    Free resources upon exit

ReadChunkDiskFile(): parse parameters in .chunkdisk file

ReadChunkDiskBases():
    bases: vector<ChunkDiskBase>
        bases[0]: current
        bases[1]: parent of bases[0]...

    Iterate ReadChunkDiskFile() → ChunkDiskBase:
        Error if duplicate parts found

Read(), Write(), Unmap() callbacks:
    in WinSpd dispatcher threads
    Complete or send response later for each request
    Post a request to a worker thread:
        one ChunkDiskWorker for each dispatcher thread
        GetAssignedWorker(): assign a ChunkDiskWorker at the first post

Read-only if -W 0:
    SPD_STORAGE_UNIT_PARAMS.WriteProtected
    ChunkDiskBase.read_only
    ChunkDiskBase.CreateChunk(is_write=false)

ChunkDiskBase:
    Disk parameters in .chunkdisk file

    Unit conversions:
        Bytes
        Blocks
        Pages
        Chunks

    Chunk files in parts:
        .lock file:
            to prevent mistakes
            if -W 1:
                No double mount
                Remove .lock upon exit
            if -W 0:
                May be shared for multiple instances of chunkdisk
                Persistent .lock:
                    Remove .lock manually to merge differential into parent

        Check num_of_chunks and check duplicate chunks when Start()

        Count num_of_chunks for each part to assign part for new chunks:
            Refresh if full, actual value may be less if -M 1

        Cache part lookup result for chunks:
            error if duplicate chunks found
            save result: found or not found

        Check if a chunk exists in this base

        CreateChunk(): open existing chunk or create new
            New chunk:
                Assign part
                Open file handle to create, locked
                Set file size, remove file on error

            Existing chunk:
                If found in cache but not existing: refresh and retry if -M 1
                Check file size, extend to write

            If no chunk exists or chunk is empty for Read():
                INVALID_HANDLE_VALUE with ERROR_SUCCESS

            is_write:
                Read-only if false
                Read-write if true, for Write() and Unmap()

            is_locked:
                For locked access
                    Shared read-only
                    Exclusive write, with DELETE access

                Synchronous I/O

        RemoveChunkLocked():
            Cancel creating a chunk (exclusive access)
            For Write() in differential chunkdisk

ChunkDiskService:
    vector<ChunkDiskBase> bases
    zero_chunk if -Z 1
    MaxTransferLength()

    Pages:
        Read/Write block → Read/Write page
        LRU, write through

        Shared read: read done if hit
        Exclusive write: read buffer if miss or write buffer
        Flush

    Chunks:
        Find in bases

        Create/Open: CreateChunk()
            Write to bases[0]
            Read from bases[0] or bases[1] or ...

        Synchronize chunk file state (see below):
            Mark chunk locked
            Check mark
            Clear mark

    Unmapped ranges:
        Merge ranges:
            Return lock if whole
        Flush ranges
        Sync

    Last pending disk I/O timestamp:
        For ChunkDiskWorker to check if disk is idle

I/O operation
    Immediate
        bypass I/O or do synchronously
        with file handle not associated with IOCP

    Synchronous
        done synchronously with file handle assocaited with IOCP
        packet sent if successful

    Asynchronous
        done asynchronously (ERROR_IO_PENDING)
        packet sent, check results later

ChunkDiskWorker:
    Worker thread

    Queue for incomplete I/O requests
        Add:
            Max: QD <= 32 (MAX_QD)
            Wait for event if full

        Remove:
            ChunkWork completed
            Signal event

        No QD for messages

    Pools:
        Chunk file handles
            Shared among ops
            (is_write == false, is_write == true) pair
            LRU policy

            locked: a worker requested not to open handles
            waiting: ops waiting for !locked

        Buffers aligned to page (4096 bytes)
            1048576 + 4096 bytes to shift buffer and align to page
            Zero-fill range only necessary
            LIFO policy

    Messages: post IOCP packet from a worker to another

    I/O Request or Message → ChunkWork:
        ops: vector<ChunkOpState>
            * Chunk operations
            * Page operations
            * No mixing of Read(), Write() or Unmap()

        buffer: from pool
            Read():
                Respond with buffer for asynchronous I/O operations
                Copy to DataBuffer for immediate I/O operations

            Write(): copy from DataBuffer

        Completed when all ops are completed

        Respond with the first error if any

    Event loop using IOCP:
        1. PostWork() in the dispatcher thread
            Prepare ChunkWork, ChunkOpState
            Do immediate I/O operations
            Post ChunkWork for asynchronous I/O

        2. PostOp(): single asynchronous operation
            ERROR_IO_PENDING: wait asynchronously
            Otherwise done successfully or with error

        3. CompleteIO(): check asynchronous I/O result
            ERROR_IO_PENDING: not done yet
            Otherwise done successfully or with error

        4. CompleteWork()
            Complete ChunkWork if all ChunkOpState are done
            Send response to WinSpd

        IdleWork(): GetQueuedCompletionStatus() timed out (idle timer)
            Reset pools

            Check if the disk is idle:
                No requests except immediate I/O operations
                Set I/O timestamp in PostWork()
                Get I/O timestamp + idle timeout in IdleWork():
                    maybe the last worker

                Flush pages
                Flush unmapped ranges

            Wait indefinitely for GetQueuedCompletionStatus()

        PeriodicCheck(): check timer expired while running loop
            Count max. load when getting a buffer or file handle

            If under load threshold:
                Close idle buffers
                Close idle file handles
                Shrink to fit the load

Read():
    Prepare work.buffer and shift it to align to pages
    Prepare ops:
        Open chunk, is_write=false
        If INVALID_HANDLE_VALUE:
            Zero-fill buffer
            Done immediately
        Else:
            Close chunk
            * Aligned chunk read
            * Page read:
                If shared read and page hit:
                    Copy page to buffer
                    Done immediately

    Aligned chunk read:
        Open chunk, is_write=false...
        Flush pages
        If INVALID_HANDLE_VALUE:
            Zero-fill buffer
            Done
        Else:
            ReadFile()...
        Close chunk

    Page read:
        Open chunk, is_write=false...
        Lock page...
        If page miss:
            If INVALID_HANDLE_VALUE:
                Page zero-filled when created
            Else:
                ReadFile()...
                Copy page to buffer
                Unlock page
                Close chunk
                Done
        Else:
            If not INVALID_HANDLE_VALUE:
                Page hit or error
                Close chunk
            Else:
                Zero-fill page
        Copy page to buffer
        Unlock page
        Done

Write():
    Prepare work.buffer and shift it to align to pages
    Prepare ops:
        Write or Zero-fill (if and only if by Unmap())
        Shift to align for zero-fill (ops.buffer == nullptr)
        * Aligned chunk write
        * Page write: whole or partial

    Aligned chunk write:
        If buffer != nullptr:
            Flush unmapped ranges for the chunk
        Else:
            Sync unmapped ranges

        Open chunk, is_write=true...:
            Lock chunk, copy parent and retry from beginning if necessary

        Flush pages...
        If buffer != nullptr:
            WriteFile()...
            Close chunk
            Done
        Else (implies -Z 1):
            DeviceIoControl(FSCTL_SET_ZERO_DATA)...
            If not supported:
                Prepare work.buffer from pool:
                    Zero-fill buffer
                    Keep ops.buffer == nullptr

                Repeat WriteFile()...:
                    Open chunk, is_write=true (reusing handle from pool)
                    Close chunk if done
            Done zero-fill:
                Close chunk
                Merge unmapped ranges

    Page write:
        If partial:
            Page read..:
                Don't copy to buffer
                Don't unlock page

        If buffer != nullptr:
            Flush unmapped ranges for the chunk
        Else:
            Sync unmapped ranges

        Open chunk, is_write=true...:
            Lock chunk, copy parent and retry from beginning if necessary

        Lock page... if whole
        If buffer != nullptr:
            Copy buffer to page
        Else:
            Zero-fill page
        WriteFile(page)...
        Unlock page
        Close chunk
        If buffer == nullptr:
            Merge unmapped ranges

Unmap():
    Merge ranges in a single request by sorting them

    work.buffer = nullptr
    Prepare ops for each range:
        If the chunk does not exist:
            Done immediately
        If partial and -Z 1:
            becomes WRITE_CHUNK with ops.buffer == nullptr (only case)

    Unmap chunk:
        Flush pages...
        If whole (not partial):
            Flush unmapped ranges
            Lock and truncate
        Else (implies -Z 0):
            Merge unmapped ranges

    Whole chunk unmapped after merging ranges:
        Expect no incomplete write and no more write requests during Unmap(),
        Try to unmap (truncate) the chunk synchronously,
        Holding the unmap ranges lock:
            Additional Write() waits for the lock
            Close unused read-write (is_write=true) handles
            Truncate the chunk if no read-write handles are open

        Read():
            Handle EOF
            Zero-fill buffer if zero bytes read and chunk is empty
            Remove read-only (is_write=false) handle from pool

Synchronize pages:
    Flush pages before page I/O
    Remove page on error in page I/O

    * Shared read to check page hit
    * Exclusive write for page miss
    * Exclusive write for Write():
        Atomic modify (read then write) if partial page write

    Serialize exclusive accesses within the same worker thread:
        SRW locks are not recursive

        Pages in ChunkDiskService:
            Check owner thread ID, ERROR_LOCKED if already locked
            user: pointer

        ChunkDiskWorker:
            Shared read in a dispatcher thread

            Singly-linked list for each page:
                PageEntry::user → ChunkOpState*
                ChunkOpState::next → ChunkOpState*

            Try to lock/flush in a worker thread:
                If not ERROR_LOCKED:
                    Set PageEntry::user
                Else:
                    Get PageEntry::user
                    Append to the linked list
                    ERROR_IO_PENDING

            Unlock in the worker thread:
                Clear PageEntry::user
                Get ChunkOpState::next and clear
                PostOp()...

Synchronize chunk file state:
    Mark the chunk locked:
        Wait for it if already locked...

    Broadcast a message to lock the chunk...:
        Notified the chunk is locked
        Add ChunkOpState to the waiting list when open, ERROR_IO_PENDING

    Wait for the existing references to be closed...:
        Reply with a message to the owner when close

    Open handle with is_locked
    Do an operation...
        * Copy the chunk from one of bases, RemoveChunkLocked() if error
        * Unmap the chunk

    Broadcast a message to unlock the handles...
        Resume ChunkOpState's in the waiting list

Support moving chunks if -M 1:
    Busy wait to open file handles if locked
    When unmapping a chunk synchronously:
        Hold the unmap ranges lock
        Retry after busy waiting...
